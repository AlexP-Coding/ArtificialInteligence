 #exemplo: distancia de Manhattan: admissivel (nunca sobrestima o custo real)
#  color, x2, y2 = static_board.get_target_info() #cor e posicao do target
#  x1, y1 = node.state.board.get_robot_coord(color) #posicao do robot da cor do target
#  return abs(x2 - x1) + abs(y2 - y1) #copiado do search xD
deu 2 testes com time limit exceeded


bfs deu 9 testes bem sucedidos e os restantes com memory exceeded
dfs n deu nenhum, deu memory exceeded em todos


#ideia Vicente
color, t_x, t_y = static_board.get_target_info() #cor e posicao do target
        rc_x, rc_y = node.state.board.get_robot_coord(color) #posicao do robot da cor do target
        distance_rc = abs(rc_x - t_x) + abs(rc_y - t_y)
       
        sum_distances = 0
        for colour in ['R','B','G','Y']:
            if colour!= color:
                x,y= node.state.board.get_robot_coord(colour)
                
                sum_distances += abs(x - t_x) + abs(y - t_y)

        return distance_rc + 3*(sum_distances)

-> procura astar : falha 1 teste : Time Limit exceeded
-> procura greddy : falha 8 testes: 


#Adaptação, onde se atribui coeficientes diferentes as distancias dos outros robots
Quanto mais longe estiverem do alvo, maior o coeficiente
 #exemplo2: c1*x1(n) +c2*x2(n) + c3*x3(n) + c4*x4(n)
color, t_x, t_y = static_board.get_target_info() #cor e posicao do target
        rc_x, rc_y = node.state.board.get_robot_coord(color) #posicao do robot da cor do target
        distance_rc = abs(rc_x - t_x) + abs(rc_y - t_y)

        max_dist=0
        min_dist = node.state.board.size
        med_dist =0
        for colour in ['R','B','G','Y']:
            if colour!= color:
                x,y= node.state.board.get_robot_coord(colour)
                distance = abs(x - t_x) + abs(y - t_y)
                if distance > max_dist:
                    max_dist = distance
                elif distance < min_dist:
                    min_dist = distance
                else:
                    med_dist = distance
                

        return distance_rc + 4*max_dist + 3*med_dist + 2*min_dist
-> procura astar: passa todos os testes 
-> procura greddy: 5 testes com Accepted 7 testes com Time Limit Exceeded
